---
import BaseLayout from '@layouts/BaseLayout.astro';

const user = Astro.locals?.user;

// Handle form submission for profile updates
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const name = formData.get('name')?.toString();
    
    if (name && user) {
      // Here we would update the user profile
      // For now, we'll redirect to show the update was processed
      return Astro.redirect('/profil?updated=true');
    }
  } catch (error) {
    console.error('Error updating profile:', error);
  }
}

const updated = Astro.url.searchParams.get('updated') === 'true';
---

<BaseLayout title="Mon profil">
  <div class="profile-container">
    {user ? (
      <div class="profile-content">
        <div class="profile-header">
          <div class="profile-avatar">
            <div class="avatar-placeholder">
              {user.name ? user.name.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
            </div>
          </div>
          <div class="profile-info">
            <h1>{user.name || 'Utilisateur'}</h1>
            <p class="email">{user.email}</p>
            <div class="profile-badges">
              <span class={`role-badge role-${user.role || 'user'}`}>
                {user.role || 'user'}
              </span>
              {user.emailVerified && (
                <span class="verified-badge">Email vérifié</span>
              )}
              {user.banned && (
                <span class="banned-badge">Compte suspendu</span>
              )}
            </div>
          </div>
        </div>

        {updated && (
          <div class="success-message">
            ✓ Profil mis à jour avec succès !
          </div>
        )}

        {user.banned && (
          <div class="ban-notice">
            <h3>Compte suspendu</h3>
            <p><strong>Raison:</strong> {user.banReason || 'Non spécifiée'}</p>
            {user.banExpires && (
              <p><strong>Expire le:</strong> {new Date(user.banExpires).toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}</p>
            )}
          </div>
        )}

        <div class="profile-sections">
          <!-- Profile Information Section -->
          <div class="profile-section">
            <h2>Informations personnelles</h2>
            <form method="POST" class="profile-form">
              <div class="form-group">
                <label for="name">Nom complet</label>
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  value={user.name || ''} 
                  placeholder="Votre nom complet"
                  disabled={user.banned}
                />
              </div>
              
              <div class="form-group">
                <label for="email">Adresse email</label>
                <input 
                  type="email" 
                  id="email" 
                  value={user.email} 
                  readonly
                  class="readonly-input"
                />
                <small class="help-text">L'email ne peut pas être modifié</small>
              </div>

              <div class="form-group">
                <label for="username">Nom d'utilisateur</label>
                <input 
                  type="text" 
                  id="username" 
                  value={user.username || ''} 
                  readonly
                  class="readonly-input"
                  placeholder="Non défini"
                />
                <small class="help-text">Le nom d'utilisateur est géré par le système</small>
              </div>

              {!user.banned && (
                <button type="submit" class="btn btn-primary">
                  Mettre à jour le profil
                </button>
              )}
            </form>
          </div>

          <!-- Account Information Section -->
          <div class="profile-section">
            <h2>Informations du compte</h2>
            <div class="info-grid">
              <div class="info-item">
                <strong>Membre depuis:</strong>
                <span>{user.createdAt ? new Date(user.createdAt).toLocaleDateString('fr-FR', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                }) : 'Non disponible'}</span>
              </div>
              
              <div class="info-item">
                <strong>Dernière mise à jour:</strong>
                <span>{user.updatedAt ? new Date(user.updatedAt).toLocaleDateString('fr-FR', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                }) : 'Non disponible'}</span>
              </div>

              <div class="info-item">
                <strong>Rôle:</strong>
                <span class={`role-badge role-${user.role || 'user'}`}>
                  {(user.role || 'user') === 'admin' ? 'Administrateur' :
                   (user.role || 'user') === 'member' ? 'Membre' :
                   (user.role || 'user') === 'guest' ? 'Invité' : 'Utilisateur'}
                </span>
              </div>

              <div class="info-item">
                <strong>Email vérifié:</strong>
                <span class={user.emailVerified ? 'text-success' : 'text-warning'}>
                  {user.emailVerified ? '✓ Oui' : '⚠ Non'}
                </span>
              </div>
            </div>
          </div>

          <!-- Security Actions Section -->
          <div class="profile-section">
            <h2>Sécurité</h2>
            <div class="security-actions">
              {!user.banned && (
                <>
                  <button type="button" class="btn btn-secondary" onclick="requestPasswordReset()">
                    Changer le mot de passe
                  </button>
                  
                  {!user.emailVerified && (
                    <button type="button" class="btn btn-warning" onclick="resendVerification()">
                      Renvoyer l'email de vérification
                    </button>
                  )}
                </>
              )}
              
              <button type="button" class="btn btn-danger" onclick="signOut()">
                Se déconnecter
              </button>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <div class="not-authenticated">
        <h1>Accès refusé</h1>
        <p>Veuillez vous connecter pour accéder à votre profil.</p>
        <a href="/login" class="btn btn-primary">Se connecter</a>
      </div>
    )}
  </div>
</BaseLayout>

<style>
  .profile-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .profile-header {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 30px;
    padding: 30px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
  }

  .profile-avatar {
    flex-shrink: 0;
  }

  .avatar-placeholder {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 32px;
    font-weight: bold;
    color: white;
  }

  .profile-info h1 {
    margin: 0 0 8px 0;
    font-size: 28px;
  }

  .profile-info .email {
    margin: 0 0 15px 0;
    opacity: 0.9;
    font-size: 16px;
  }

  .profile-badges {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .role-badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
  }

  .role-admin {
    background: #dc3545;
    color: white;
  }

  .role-user {
    background: #007bff;
    color: white;
  }

  .role-member {
    background: #28a745;
    color: white;
  }

  .role-guest {
    background: #6c757d;
    color: white;
  }

  .verified-badge {
    background: #28a745;
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
  }

  .banned-badge {
    background: #dc3545;
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
  }

  .success-message {
    background: #d4edda;
    color: #155724;
    padding: 12px 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #c3e6cb;
  }

  .ban-notice {
    background: #f8d7da;
    color: #721c24;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    border: 1px solid #f5c6cb;
  }

  .ban-notice h3 {
    margin: 0 0 10px 0;
    color: #721c24;
  }

  .ban-notice p {
    margin: 5px 0;
  }

  .profile-sections {
    display: grid;
    gap: 30px;
  }

  .profile-section {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
  }

  .profile-section h2 {
    margin: 0 0 20px 0;
    color: #333;
    font-size: 20px;
  }

  .profile-form {
    display: grid;
    gap: 20px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .form-group label {
    font-weight: bold;
    color: #555;
    font-size: 14px;
  }

  .form-group input {
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.2s;
  }

  .form-group input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
  }

  .readonly-input {
    background: #f8f9fa !important;
    cursor: not-allowed;
  }

  .help-text {
    color: #6c757d;
    font-size: 13px;
  }

  .info-grid {
    display: grid;
    gap: 15px;
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #eee;
  }

  .info-item:last-child {
    border-bottom: none;
  }

  .info-item strong {
    color: #555;
  }

  .text-success {
    color: #28a745;
    font-weight: bold;
  }

  .text-warning {
    color: #ffc107;
    font-weight: bold;
  }

  .security-actions {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    text-align: center;
    transition: all 0.2s;
  }

  .btn-primary {
    background: #007bff;
    color: white;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-warning {
    background: #ffc107;
    color: #212529;
  }

  .btn-danger {
    background: #dc3545;
    color: white;
  }

  .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }

  .btn:active {
    transform: translateY(0);
  }

  .not-authenticated {
    text-align: center;
    padding: 60px 20px;
  }

  .not-authenticated h1 {
    color: #333;
    margin-bottom: 15px;
  }

  .not-authenticated p {
    color: #6c757d;
    margin-bottom: 25px;
    font-size: 16px;
  }

  @media (max-width: 768px) {
    .profile-header {
      flex-direction: column;
      text-align: center;
    }
    
    .profile-badges {
      justify-content: center;
    }
    
    .info-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 5px;
    }
    
    .security-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  async function requestPasswordReset() {
    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: document.getElementById('email')?.value
        })
      });

      if (response.ok) {
        alert('Un email de réinitialisation de mot de passe a été envoyé à votre adresse.');
      } else {
        const data = await response.json();
        alert('Erreur: ' + (data.error || 'Impossible d\'envoyer l\'email de réinitialisation'));
      }
    } catch (error) {
      console.error('Error requesting password reset:', error);
      alert('Erreur lors de la demande de réinitialisation');
    }
  }

  async function resendVerification() {
    try {
      const response = await fetch('/api/auth/send-verification-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        alert('Email de vérification renvoyé avec succès !');
      } else {
        const data = await response.json();
        alert('Erreur: ' + (data.error || 'Impossible de renvoyer l\'email de vérification'));
      }
    } catch (error) {
      console.error('Error resending verification:', error);
      alert('Erreur lors de l\'envoi de l\'email de vérification');
    }
  }

  async function signOut() {
    if (confirm('Êtes-vous sûr de vouloir vous déconnecter ?')) {
      try {
        const response = await fetch('/api/auth/signout', {
          method: 'POST'
        });
        
        if (response.ok) {
          window.location.href = '/';
        } else {
          alert('Erreur lors de la déconnexion');
        }
      } catch (error) {
        console.error('Error signing out:', error);
        alert('Erreur lors de la déconnexion');
      }
    }
  }
</script>
