---
interface Props {
  idPrefix?: string;
  showDots?: boolean;
  showScrollBar?: boolean;
  showArrows?: boolean;
  autoplay?: boolean;
  autoplayInterval?: number;
  preset?: 'default' | 'primary' | 'secondary' | 'accent';
  aspectRatio?: string;
  className?: string;
}

const {
  idPrefix = "carousel",
  showDots = true,
  showScrollBar = false,
  showArrows = true,
  autoplay = false,
  autoplayInterval = 4000,
  preset = 'default',
  aspectRatio = '16/9',
  className = ''
} = Astro.props;

// Presets configuration
const presets = {
  default: {
    borderRadius: '0.5rem',
    shadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
    arrowColor: 'rgba(255, 255, 255, 0.9)',
    arrowBg: 'rgba(0, 0, 0, 0.5)',
    dotColor: 'rgba(255, 255, 255, 0.7)',
    dotActiveColor: '#ffffff'
  },
  primary: {
    borderRadius: '0.75rem',
    shadow: '0 6px 16px rgba(44, 46, 59, 0.2)',
    arrowColor: 'var(--color-primary)',
    arrowBg: 'rgba(255, 255, 255, 0.9)',
    dotColor: 'var(--color-primary-light)',
    dotActiveColor: 'var(--color-primary)'
  },
  secondary: {
    borderRadius: '0.25rem',
    shadow: '0 2px 8px rgba(224, 226, 233, 0.3)',
    arrowColor: 'var(--color-secondary-dark)',
    arrowBg: 'rgba(255, 255, 255, 0.8)',
    dotColor: 'var(--color-secondary)',
    dotActiveColor: 'var(--color-secondary-dark)'
  },
  accent: {
    borderRadius: '1rem',
    shadow: '0 8px 20px rgba(94, 107, 138, 0.25)',
    arrowColor: 'var(--color-accent-light)',
    arrowBg: 'rgba(0, 0, 0, 0.6)',
    dotColor: 'var(--color-accent-light)',
    dotActiveColor: 'var(--color-accent)'
  }
};

const currentPreset = presets[preset];
---

<section 
  class={`carousel preset-carousel-${preset} ${className}`}
  aria-label="Image Carousel"
  style={`--carousel-aspect-ratio: ${aspectRatio}; --autoplay-interval: ${autoplayInterval}ms;`}
  data-autoplay={autoplay}
  data-interval={autoplayInterval}
>
  <div class={`carousel__viewport${!showScrollBar ? ' carousel--hide-scrollbar' : ''}`}>
    <div class="carousel__track" id={`${idPrefix}__track`}>
      <slot />
    </div>
  </div>

  {showArrows && (
    <div class="carousel__controls">
      <button class="carousel__button carousel__button--prev" aria-label="Previous slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="carousel__button carousel__button--next" aria-label="Next slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
  )}

  {showDots && (
    <div class="carousel__indicators" role="tablist" aria-label="Slide indicators">
      <!-- Dots will be generated by JavaScript -->
    </div>
  )}
</section>

<style is:inline>
  .carousel {
    position: relative;
    width: 100%;
    aspect-ratio: var(--carousel-aspect-ratio);
    overflow: hidden;
    border-radius: var(--preset-border-radius);
    box-shadow: var(--preset-shadow);
    background: #000;
  }

  .carousel__viewport {
    width: 100%;
    height: 100%;
    overflow-x: auto;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .carousel__viewport::-webkit-scrollbar {
    display: none;
  }

  .carousel--hide-scrollbar .carousel__viewport {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .carousel--hide-scrollbar .carousel__viewport::-webkit-scrollbar {
    display: none;
  }

  .carousel__track {
    display: flex;
    height: 100%;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .carousel__track > * {
    flex: 0 0 100%;
    width: 100%;
    height: 100%;
    scroll-snap-align: start;
    scroll-snap-stop: always;
  }

  .carousel__track img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border: none;
    border-radius: 0;
  }

  .carousel__controls {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
  }

  .carousel__button {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border: none;
    background: var(--preset-arrow-bg);
    color: var(--preset-arrow-color);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    pointer-events: auto;
    opacity: 0.8;
  }

  .carousel__button:hover {
    opacity: 1;
    transform: scale(1.1);
  }

  .carousel__button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .carousel__button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: none;
  }

  .carousel__indicators {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 2rem;
    backdrop-filter: blur(4px);
  }

  .carousel__dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    background: var(--preset-dot-color);
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.7;
  }

  .carousel__dot:hover {
    opacity: 1;
    transform: scale(1.2);
  }

  .carousel__dot.active {
    background: var(--preset-dot-active-color);
    opacity: 1;
    transform: scale(1.3);
  }

  .carousel__dot:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* Preset Styles */
  .preset-carousel-default {
    --preset-border-radius: 0.5rem;
    --preset-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    --preset-arrow-color: rgba(255, 255, 255, 0.9);
    --preset-arrow-bg: rgba(0, 0, 0, 0.5);
    --preset-dot-color: rgba(255, 255, 255, 0.7);
    --preset-dot-active-color: #ffffff;
  }

  .preset-carousel-primary {
    --preset-border-radius: 0.75rem;
    --preset-shadow: 0 6px 16px rgba(44, 46, 59, 0.2);
    --preset-arrow-color: var(--color-primary);
    --preset-arrow-bg: rgba(255, 255, 255, 0.9);
    --preset-dot-color: var(--color-primary-light);
    --preset-dot-active-color: var(--color-primary);
  }

  .preset-carousel-secondary {
    --preset-border-radius: 0.25rem;
    --preset-shadow: 0 2px 8px rgba(224, 226, 233, 0.3);
    --preset-arrow-color: var(--color-secondary-dark);
    --preset-arrow-bg: rgba(255, 255, 255, 0.8);
    --preset-dot-color: var(--color-secondary);
    --preset-dot-active-color: var(--color-secondary-dark);
  }

  .preset-carousel-accent {
    --preset-border-radius: 1rem;
    --preset-shadow: 0 8px 20px rgba(94, 107, 138, 0.25);
    --preset-arrow-color: var(--color-accent-light);
    --preset-arrow-bg: rgba(0, 0, 0, 0.6);
    --preset-dot-color: var(--color-accent-light);
    --preset-dot-active-color: var(--color-accent);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .carousel__button {
      width: 40px;
      height: 40px;
    }

    .carousel__controls {
      padding: 0 0.5rem;
    }

    .carousel__indicators {
      bottom: 0.5rem;
      padding: 0.25rem 0.75rem;
    }

    .carousel__dot {
      width: 10px;
      height: 10px;
    }
  }

  @media (max-width: 480px) {
    .carousel__button {
      width: 36px;
      height: 36px;
    }

    .carousel__indicators {
      gap: 0.25rem;
    }

    .carousel__dot {
      width: 8px;
      height: 8px;
    }
  }

  /* Autoplay animation */
  .carousel[data-autoplay="true"] .carousel__track {
    animation: carousel-autoplay var(--autoplay-interval) infinite linear;
  }

  .carousel:hover .carousel__track {
    animation-play-state: paused;
  }

  @keyframes carousel-autoplay {
    0%, 20% { transform: translateX(0%); }
    25%, 45% { transform: translateX(-100%); }
    50%, 70% { transform: translateX(-200%); }
    75%, 95% { transform: translateX(-300%); }
    100% { transform: translateX(0%); }
  }
</style>

<script is:inline>
  class CarouselComponent {
    constructor(carousel) {
      this.carousel = carousel;
      this.track = carousel.querySelector('.carousel__track');
      this.slides = Array.from(this.track.children);
      this.prevButton = carousel.querySelector('.carousel__button--prev');
      this.nextButton = carousel.querySelector('.carousel__button--next');
      this.indicatorsContainer = carousel.querySelector('.carousel__indicators');
      
      this.currentIndex = 0;
      this.isAutoplay = carousel.dataset.autoplay === 'true';
      this.autoplayInterval = parseInt(carousel.dataset.interval) || 4000;
      this.autoplayTimer = null;

      this.init();
    }

    init() {
      this.createIndicators();
      this.bindEvents();
      this.updateCarousel();
      
      if (this.isAutoplay) {
        this.startAutoplay();
      }
    }

    createIndicators() {
      if (!this.indicatorsContainer) return;
      
      this.slides.forEach((_, index) => {
        const dot = document.createElement('button');
        dot.className = 'carousel__dot';
        dot.setAttribute('aria-label', `Go to slide ${index + 1}`);
        dot.addEventListener('click', () => this.goToSlide(index));
        this.indicatorsContainer.appendChild(dot);
      });
    }

    bindEvents() {
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }

      // Pause autoplay on hover
      this.carousel.addEventListener('mouseenter', () => this.stopAutoplay());
      this.carousel.addEventListener('mouseleave', () => {
        if (this.isAutoplay) this.startAutoplay();
      });

      // Keyboard navigation
      this.carousel.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });

      // Touch/swipe support
      let startX = 0;
      let endX = 0;

      this.carousel.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });

      this.carousel.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
      });
    }

    updateCarousel() {
      const translateX = -this.currentIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      // Update indicators
      const dots = this.indicatorsContainer?.querySelectorAll('.carousel__dot');
      dots?.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });

      // Update button states
      if (this.prevButton) {
        this.prevButton.disabled = this.currentIndex === 0;
      }
      if (this.nextButton) {
        this.nextButton.disabled = this.currentIndex === this.slides.length - 1;
      }
    }

    goToSlide(index) {
      this.currentIndex = Math.max(0, Math.min(index, this.slides.length - 1));
      this.updateCarousel();
      this.resetAutoplay();
    }

    nextSlide() {
      if (this.currentIndex < this.slides.length - 1) {
        this.currentIndex++;
      } else {
        this.currentIndex = 0; // Loop back to first slide
      }
      this.updateCarousel();
      this.resetAutoplay();
    }

    prevSlide() {
      if (this.currentIndex > 0) {
        this.currentIndex--;
      } else {
        this.currentIndex = this.slides.length - 1; // Loop to last slide
      }
      this.updateCarousel();
      this.resetAutoplay();
    }

    startAutoplay() {
      if (!this.isAutoplay) return;
      this.stopAutoplay();
      this.autoplayTimer = setInterval(() => {
        this.nextSlide();
      }, this.autoplayInterval);
    }

    stopAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }

    resetAutoplay() {
      if (this.isAutoplay) {
        this.stopAutoplay();
        this.startAutoplay();
      }
    }
  }

  // Initialize all carousels
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');
    carousels.forEach(carousel => new CarouselComponent(carousel));
  });
</script>